#!/usr/bin/env ruby

HELP = <<-multiline

          JavaScript Preprocessor

  Usage:  jspp input > output

Example:      main.js:  /*> script.js */

                        var style = "/*> style.css */";

            style.css:  html, body {margin:0; padding:0}
                        /*> http://nv.github.com/js-preprocessor/example/css/style-child.css */
                        .my-style {background: #fffacc}

      style-child.css:  .i-am-child {}

            script.js:  var my_script;

 jspp example/main.js:  var my_script;

                        var style = "html, body {margin:0; padding:0}\\
                        .i-am-child {}\\
                        .my-style {background: #fffacc}"
multiline

DIR = File.dirname ARGV.first || '.'
R_INCLUDE = %r{/\*>\s*(.+?)\s*\*/}
R_INCLUDE_INSIDE_STRING = %r{"#{R_INCLUDE.source}"}

def get_file path, base_dir='.'
  if path.index'http://' or path.index'https://'
    require 'open-uri'
    file = open(path).read
    dir = File.dirname path
  else
    full_path = File.join base_dir, path
    file = File.read full_path
    dir = File.dirname full_path
  end
  [file, dir]
end

def parse text='', base_dir='.'
  text.gsub!(R_INCLUDE_INSIDE_STRING) {
    file, dir = get_file $1, base_dir
    parsed = parse file, dir
    '"' << parsed.gsub(/$/, '\\').chop << '"'
  }
  text.gsub!(R_INCLUDE) {
    file, dir = get_file $1, base_dir
    parse file, dir
  }
  text
end

if $stdin.tty? and ARGV.empty? or ARGV.delete'-h' or ARGV.delete'--help'
  puts HELP
else
  print parse(ARGF.read, DIR)
end
